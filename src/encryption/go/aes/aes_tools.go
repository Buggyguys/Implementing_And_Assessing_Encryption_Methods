package aes

import (
	"bytes"
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"io"
	"encryption/utils"
)

// Constants for AES
const (
	// Block size for AES (always 16 bytes / 128 bits)
	AESBlockSize = 16

	// IV size for AES modes (16 bytes / 128 bits)
	AESIVSize = 16

	// Number of rounds for different key sizes
	AESRounds128 = 10
	AESRounds192 = 12
	AESRounds256 = 14
)

// AESContext holds the expanded key and other AES parameters
type AESContext struct {
	expandedKey []uint32
	numRounds   int
	KeySize     int
	Mode        string
}

// AES S-box lookup table
var SBox = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

// Inverse S-box lookup table
var InvSBox = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

// Rcon lookup table
var Rcon = [11]uint32{
	0x00000000,
	0x01000000,
	0x02000000,
	0x04000000,
	0x08000000,
	0x10000000,
	0x20000000,
	0x40000000,
	0x80000000,
	0x1b000000,
	0x36000000,
}

// NewAESContext creates a new AES context with the given key
func NewAESContext(key []byte) (*AESContext, error) {
	keySize := len(key)
	var numRounds int
	switch keySize * 8 {
	case 128:
		numRounds = AESRounds128
	case 192:
		numRounds = AESRounds192
	case 256:
		numRounds = AESRounds256
	default:
		return nil, fmt.Errorf("invalid key size: %d bits", keySize*8)
	}

	// Create context
	ctx := &AESContext{
		numRounds: numRounds,
	}

	// Expand the key
	ctx.expandedKey = ctx.expandKey(key)

	return ctx, nil
}

// Core AES operations

func (ctx *AESContext) expandKey(key []byte) []uint32 {
	keySize := len(key)
	nk := keySize / 4 // Number of 32-bit words in key
	nr := ctx.numRounds
	expandedKeySize := 4 * (nr + 1) * 4 // Number of 32-bit words in expanded key

	// Convert key to 32-bit words
	w := make([]uint32, expandedKeySize/4)
	for i := 0; i < nk; i++ {
		w[i] = binary.BigEndian.Uint32(key[4*i:])
	}

	// Expand key
	for i := nk; i < len(w); i++ {
		temp := w[i-1]
		if i%nk == 0 {
			temp = SubWord(RotWord(temp)) ^ Rcon[i/nk]
		} else if nk > 6 && i%nk == 4 {
			temp = SubWord(temp)
		}
		w[i] = w[i-nk] ^ temp
	}

	return w
}

// EncryptBlock encrypts a single 16-byte block
func (ctx *AESContext) EncryptBlock(block []byte) {
	// Initial round key addition
	state := make([]byte, AESBlockSize)
	copy(state, block)
	AddRoundKey(state, ctx.getRoundKey(0))

	// Main rounds
	for round := 1; round < ctx.numRounds; round++ {
		SubBytes(state)
		ShiftRows(state)
		MixColumns(state)
		AddRoundKey(state, ctx.getRoundKey(round))
	}

	// Final round (no MixColumns)
	SubBytes(state)
	ShiftRows(state)
	AddRoundKey(state, ctx.getRoundKey(ctx.numRounds))

	// Copy result back to block
	copy(block, state)
}

// DecryptBlock decrypts a single 16-byte block
func (ctx *AESContext) DecryptBlock(block []byte) {
	// Initial round key addition
	state := make([]byte, AESBlockSize)
	copy(state, block)
	AddRoundKey(state, ctx.getRoundKey(ctx.numRounds))

	// Main rounds
	for round := ctx.numRounds - 1; round > 0; round-- {
		InvShiftRows(state)
		InvSubBytes(state)
		AddRoundKey(state, ctx.getRoundKey(round))
		InvMixColumns(state)
	}

	// Final round (no InvMixColumns)
	InvShiftRows(state)
	InvSubBytes(state)
	AddRoundKey(state, ctx.getRoundKey(0))

	// Copy result back to block
	copy(block, state)
}

// Utility functions

func (ctx *AESContext) getRoundKey(round int) []byte {
	roundKey := make([]byte, AESBlockSize)
	for i := 0; i < 4; i++ {
		binary.BigEndian.PutUint32(roundKey[4*i:], ctx.expandedKey[4*round+i])
	}
	return roundKey
}

func (ctx *AESContext) GetNumRounds() int {
	return ctx.numRounds
}

// GenerateRandomIV generates a random IV for AES modes that require it
func GenerateRandomIV() ([]byte, error) {
	iv := make([]byte, AESIVSize)
	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
		return nil, err
	}
	return iv, nil
}

// PKCS7 padding helpers
func PKCS7Pad(data []byte) []byte {
	padding := AESBlockSize - len(data)%AESBlockSize
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(data, padText...)
}

func PKCS7Unpad(data []byte) ([]byte, error) {
	length := len(data)
	if length == 0 {
		return nil, fmt.Errorf("empty data")
	}
	
	padding := int(data[length-1])
	if padding > AESBlockSize || padding == 0 {
		return nil, fmt.Errorf("invalid padding size")
	}

	// Verify padding
	for i := length - padding; i < length; i++ {
		if data[i] != byte(padding) {
			return nil, fmt.Errorf("invalid padding")
		}
	}

	return data[:length-padding], nil
}

// Block operation functions

func SubBytes(state []byte) {
	for i := range state {
		state[i] = SBox[state[i]]
	}
}

func InvSubBytes(state []byte) {
	for i := range state {
		state[i] = InvSBox[state[i]]
	}
}

func ShiftRows(state []byte) {
	// Row 1: shift left by 1
	state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]
	
	// Row 2: shift left by 2
	state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
	
	// Row 3: shift left by 3
	state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]
}

func InvShiftRows(state []byte) {
	// Row 1: shift right by 1
	state[1], state[5], state[9], state[13] = state[13], state[1], state[5], state[9]
	
	// Row 2: shift right by 2
	state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
	
	// Row 3: shift right by 3
	state[3], state[7], state[11], state[15] = state[7], state[11], state[15], state[3]
}

func MixColumns(state []byte) {
	for i := 0; i < 4; i++ {
		col := i * 4
		a := state[col]
		b := state[col+1]
		c := state[col+2]
		d := state[col+3]

		state[col] = utils.GaloisFieldMultiplyByte(a, 2) ^ utils.GaloisFieldMultiplyByte(b, 3) ^ c ^ d
		state[col+1] = a ^ utils.GaloisFieldMultiplyByte(b, 2) ^ utils.GaloisFieldMultiplyByte(c, 3) ^ d
		state[col+2] = a ^ b ^ utils.GaloisFieldMultiplyByte(c, 2) ^ utils.GaloisFieldMultiplyByte(d, 3)
		state[col+3] = utils.GaloisFieldMultiplyByte(a, 3) ^ b ^ c ^ utils.GaloisFieldMultiplyByte(d, 2)
	}
}

// InvMixColumns transformation
func InvMixColumns(state []byte) {
	for col := 0; col < 16; col += 4 {
		a := state[col]
		b := state[col+1]
		c := state[col+2]
		d := state[col+3]

		state[col] = utils.GaloisFieldMultiplyByte(a, 0x0e) ^ utils.GaloisFieldMultiplyByte(b, 0x0b) ^ utils.GaloisFieldMultiplyByte(c, 0x0d) ^ utils.GaloisFieldMultiplyByte(d, 0x09)
		state[col+1] = utils.GaloisFieldMultiplyByte(a, 0x09) ^ utils.GaloisFieldMultiplyByte(b, 0x0e) ^ utils.GaloisFieldMultiplyByte(c, 0x0b) ^ utils.GaloisFieldMultiplyByte(d, 0x0d)
		state[col+2] = utils.GaloisFieldMultiplyByte(a, 0x0d) ^ utils.GaloisFieldMultiplyByte(b, 0x09) ^ utils.GaloisFieldMultiplyByte(c, 0x0e) ^ utils.GaloisFieldMultiplyByte(d, 0x0b)
		state[col+3] = utils.GaloisFieldMultiplyByte(a, 0x0b) ^ utils.GaloisFieldMultiplyByte(b, 0x0d) ^ utils.GaloisFieldMultiplyByte(c, 0x09) ^ utils.GaloisFieldMultiplyByte(d, 0x0e)
	}
}

func AddRoundKey(state []byte, roundKey []byte) {
	for i := range state {
		state[i] ^= roundKey[i]
	}
}

func RotWord(word uint32) uint32 {
	return (word << 8) | (word >> 24)
}

func SubWord(word uint32) uint32 {
	result := uint32(0)
	for i := 0; i < 4; i++ {
		result |= uint32(SBox[byte(word>>(8*i))]) << (8 * i)
	}
	return result
} 